// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URI")
}

model Account {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String   @unique
  isOwner      Boolean?
  tokenId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  passwordHash String
  user         User?

  @@map("accounts")
}

model User {
  id        String     @id @map("_id") @db.ObjectId
  account   Account    @relation(fields: [id], references: [id])
  relations Relation[]

  @@map("users")
}

model Chat {

  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  chatType      ChatType
  createdAt     DateTime        @default(now())
  recipients    chatRecipient[]
  messages      Message[]       @relation("messages")
  // lastMessage   Message?        @relation("lastMessage", fields: [lastMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  lastMessageId String?         @unique

  @@map("chats")
}

model Message {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  chat            Chat     @relation("messages", fields: [chatId], references: [id])
  // lastMessageChat Chat?    @relation("lastMessage")
  chatId          String
  authorId        String
  content         String?
  deleted         Boolean?
  createdAt       DateTime @default(now())

  @@map("messages")
}

type Relation {
  userId    String         @db.ObjectId
  status    RelationStatus
  createdAt DateTime       @default(now())
}

type chatRecipient {
  userId   String  @db.ObjectId
  nickname String?

}

enum RelationStatus {
  Friend
  BlockedBySelf
  Incoming
  Outgoing
  BlockedByOther
}

enum ChatType {
  Direct
  Group
}
